// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message.proto
// Protobuf C++ Version: 5.29.3

#ifndef message_2eproto_2epb_2eh
#define message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace Messages {
class ConnectedResponse;
struct ConnectedResponseDefaultTypeInternal;
extern ConnectedResponseDefaultTypeInternal _ConnectedResponse_default_instance_;
class KeepAliveNoti;
struct KeepAliveNotiDefaultTypeInternal;
extern KeepAliveNotiDefaultTypeInternal _KeepAliveNoti_default_instance_;
class KeepAliveRequest;
struct KeepAliveRequestDefaultTypeInternal;
extern KeepAliveRequestDefaultTypeInternal _KeepAliveRequest_default_instance_;
class MessageWrapper;
struct MessageWrapperDefaultTypeInternal;
extern MessageWrapperDefaultTypeInternal _MessageWrapper_default_instance_;
}  // namespace Messages
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Messages {

// ===================================================================


// -------------------------------------------------------------------

class KeepAliveRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:Messages.KeepAliveRequest) */ {
 public:
  inline KeepAliveRequest() : KeepAliveRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeepAliveRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeepAliveRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeepAliveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeepAliveRequest(const KeepAliveRequest& from) : KeepAliveRequest(nullptr, from) {}
  inline KeepAliveRequest(KeepAliveRequest&& from) noexcept
      : KeepAliveRequest(nullptr, std::move(from)) {}
  inline KeepAliveRequest& operator=(const KeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveRequest& operator=(KeepAliveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveRequest* internal_default_instance() {
    return reinterpret_cast<const KeepAliveRequest*>(
        &_KeepAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(KeepAliveRequest& a, KeepAliveRequest& b) { a.Swap(&b); }
  inline void Swap(KeepAliveRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<KeepAliveRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KeepAliveRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KeepAliveRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Messages.KeepAliveRequest"; }

 protected:
  explicit KeepAliveRequest(::google::protobuf::Arena* arena);
  KeepAliveRequest(::google::protobuf::Arena* arena, const KeepAliveRequest& from);
  KeepAliveRequest(::google::protobuf::Arena* arena, KeepAliveRequest&& from) noexcept
      : KeepAliveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:Messages.KeepAliveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeepAliveRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveNoti final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:Messages.KeepAliveNoti) */ {
 public:
  inline KeepAliveNoti() : KeepAliveNoti(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeepAliveNoti* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeepAliveNoti));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeepAliveNoti(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeepAliveNoti(const KeepAliveNoti& from) : KeepAliveNoti(nullptr, from) {}
  inline KeepAliveNoti(KeepAliveNoti&& from) noexcept
      : KeepAliveNoti(nullptr, std::move(from)) {}
  inline KeepAliveNoti& operator=(const KeepAliveNoti& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveNoti& operator=(KeepAliveNoti&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveNoti& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveNoti* internal_default_instance() {
    return reinterpret_cast<const KeepAliveNoti*>(
        &_KeepAliveNoti_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(KeepAliveNoti& a, KeepAliveNoti& b) { a.Swap(&b); }
  inline void Swap(KeepAliveNoti* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveNoti* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveNoti* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<KeepAliveNoti>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KeepAliveNoti& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KeepAliveNoti& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Messages.KeepAliveNoti"; }

 protected:
  explicit KeepAliveNoti(::google::protobuf::Arena* arena);
  KeepAliveNoti(::google::protobuf::Arena* arena, const KeepAliveNoti& from);
  KeepAliveNoti(::google::protobuf::Arena* arena, KeepAliveNoti&& from) noexcept
      : KeepAliveNoti(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:Messages.KeepAliveNoti)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeepAliveNoti& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ConnectedResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Messages.ConnectedResponse) */ {
 public:
  inline ConnectedResponse() : ConnectedResponse(nullptr) {}
  ~ConnectedResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConnectedResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConnectedResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectedResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectedResponse(const ConnectedResponse& from) : ConnectedResponse(nullptr, from) {}
  inline ConnectedResponse(ConnectedResponse&& from) noexcept
      : ConnectedResponse(nullptr, std::move(from)) {}
  inline ConnectedResponse& operator=(const ConnectedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedResponse& operator=(ConnectedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectedResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectedResponse*>(
        &_ConnectedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ConnectedResponse& a, ConnectedResponse& b) { a.Swap(&b); }
  inline void Swap(ConnectedResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectedResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectedResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConnectedResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectedResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectedResponse& from) { ConnectedResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConnectedResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Messages.ConnectedResponse"; }

 protected:
  explicit ConnectedResponse(::google::protobuf::Arena* arena);
  ConnectedResponse(::google::protobuf::Arena* arena, const ConnectedResponse& from);
  ConnectedResponse(::google::protobuf::Arena* arena, ConnectedResponse&& from) noexcept
      : ConnectedResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Messages.ConnectedResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConnectedResponse& from_msg);
    ::int32_t index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MessageWrapper final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Messages.MessageWrapper) */ {
 public:
  inline MessageWrapper() : MessageWrapper(nullptr) {}
  ~MessageWrapper() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MessageWrapper* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MessageWrapper));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageWrapper(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageWrapper(const MessageWrapper& from) : MessageWrapper(nullptr, from) {}
  inline MessageWrapper(MessageWrapper&& from) noexcept
      : MessageWrapper(nullptr, std::move(from)) {}
  inline MessageWrapper& operator=(const MessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageWrapper& operator=(MessageWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kConnectedResponse = 10,
    kKeepAliveNoti = 11,
    kKeepAliveRequest = 12,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const MessageWrapper* internal_default_instance() {
    return reinterpret_cast<const MessageWrapper*>(
        &_MessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MessageWrapper& a, MessageWrapper& b) { a.Swap(&b); }
  inline void Swap(MessageWrapper* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageWrapper* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MessageWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageWrapper& from) { MessageWrapper::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MessageWrapper* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Messages.MessageWrapper"; }

 protected:
  explicit MessageWrapper(::google::protobuf::Arena* arena);
  MessageWrapper(::google::protobuf::Arena* arena, const MessageWrapper& from);
  MessageWrapper(::google::protobuf::Arena* arena, MessageWrapper&& from) noexcept
      : MessageWrapper(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageSizeFieldNumber = 1,
    kConnectedResponseFieldNumber = 10,
    kKeepAliveNotiFieldNumber = 11,
    kKeepAliveRequestFieldNumber = 12,
  };
  // int32 message_size = 1;
  void clear_message_size() ;
  ::int32_t message_size() const;
  void set_message_size(::int32_t value);

  private:
  ::int32_t _internal_message_size() const;
  void _internal_set_message_size(::int32_t value);

  public:
  // .Messages.ConnectedResponse connected_response = 10;
  bool has_connected_response() const;
  private:
  bool _internal_has_connected_response() const;

  public:
  void clear_connected_response() ;
  const ::Messages::ConnectedResponse& connected_response() const;
  PROTOBUF_NODISCARD ::Messages::ConnectedResponse* release_connected_response();
  ::Messages::ConnectedResponse* mutable_connected_response();
  void set_allocated_connected_response(::Messages::ConnectedResponse* value);
  void unsafe_arena_set_allocated_connected_response(::Messages::ConnectedResponse* value);
  ::Messages::ConnectedResponse* unsafe_arena_release_connected_response();

  private:
  const ::Messages::ConnectedResponse& _internal_connected_response() const;
  ::Messages::ConnectedResponse* _internal_mutable_connected_response();

  public:
  // .Messages.KeepAliveNoti keep_alive_noti = 11;
  bool has_keep_alive_noti() const;
  private:
  bool _internal_has_keep_alive_noti() const;

  public:
  void clear_keep_alive_noti() ;
  const ::Messages::KeepAliveNoti& keep_alive_noti() const;
  PROTOBUF_NODISCARD ::Messages::KeepAliveNoti* release_keep_alive_noti();
  ::Messages::KeepAliveNoti* mutable_keep_alive_noti();
  void set_allocated_keep_alive_noti(::Messages::KeepAliveNoti* value);
  void unsafe_arena_set_allocated_keep_alive_noti(::Messages::KeepAliveNoti* value);
  ::Messages::KeepAliveNoti* unsafe_arena_release_keep_alive_noti();

  private:
  const ::Messages::KeepAliveNoti& _internal_keep_alive_noti() const;
  ::Messages::KeepAliveNoti* _internal_mutable_keep_alive_noti();

  public:
  // .Messages.KeepAliveRequest keep_alive_request = 12;
  bool has_keep_alive_request() const;
  private:
  bool _internal_has_keep_alive_request() const;

  public:
  void clear_keep_alive_request() ;
  const ::Messages::KeepAliveRequest& keep_alive_request() const;
  PROTOBUF_NODISCARD ::Messages::KeepAliveRequest* release_keep_alive_request();
  ::Messages::KeepAliveRequest* mutable_keep_alive_request();
  void set_allocated_keep_alive_request(::Messages::KeepAliveRequest* value);
  void unsafe_arena_set_allocated_keep_alive_request(::Messages::KeepAliveRequest* value);
  ::Messages::KeepAliveRequest* unsafe_arena_release_keep_alive_request();

  private:
  const ::Messages::KeepAliveRequest& _internal_keep_alive_request() const;
  ::Messages::KeepAliveRequest* _internal_mutable_keep_alive_request();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Messages.MessageWrapper)
 private:
  class _Internal;
  void set_has_connected_response();
  void set_has_keep_alive_noti();
  void set_has_keep_alive_request();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageWrapper& from_msg);
    ::int32_t message_size_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::Messages::ConnectedResponse* connected_response_;
      ::Messages::KeepAliveNoti* keep_alive_noti_;
      ::Messages::KeepAliveRequest* keep_alive_request_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageWrapper

// int32 message_size = 1;
inline void MessageWrapper::clear_message_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_size_ = 0;
}
inline ::int32_t MessageWrapper::message_size() const {
  // @@protoc_insertion_point(field_get:Messages.MessageWrapper.message_size)
  return _internal_message_size();
}
inline void MessageWrapper::set_message_size(::int32_t value) {
  _internal_set_message_size(value);
  // @@protoc_insertion_point(field_set:Messages.MessageWrapper.message_size)
}
inline ::int32_t MessageWrapper::_internal_message_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_size_;
}
inline void MessageWrapper::_internal_set_message_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_size_ = value;
}

// .Messages.ConnectedResponse connected_response = 10;
inline bool MessageWrapper::has_connected_response() const {
  return payload_case() == kConnectedResponse;
}
inline bool MessageWrapper::_internal_has_connected_response() const {
  return payload_case() == kConnectedResponse;
}
inline void MessageWrapper::set_has_connected_response() {
  _impl_._oneof_case_[0] = kConnectedResponse;
}
inline void MessageWrapper::clear_connected_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kConnectedResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.connected_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.connected_response_);
    }
    clear_has_payload();
  }
}
inline ::Messages::ConnectedResponse* MessageWrapper::release_connected_response() {
  // @@protoc_insertion_point(field_release:Messages.MessageWrapper.connected_response)
  if (payload_case() == kConnectedResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.connected_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.connected_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Messages::ConnectedResponse& MessageWrapper::_internal_connected_response() const {
  return payload_case() == kConnectedResponse ? *_impl_.payload_.connected_response_ : reinterpret_cast<::Messages::ConnectedResponse&>(::Messages::_ConnectedResponse_default_instance_);
}
inline const ::Messages::ConnectedResponse& MessageWrapper::connected_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Messages.MessageWrapper.connected_response)
  return _internal_connected_response();
}
inline ::Messages::ConnectedResponse* MessageWrapper::unsafe_arena_release_connected_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.MessageWrapper.connected_response)
  if (payload_case() == kConnectedResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.connected_response_;
    _impl_.payload_.connected_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageWrapper::unsafe_arena_set_allocated_connected_response(::Messages::ConnectedResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_connected_response();
    _impl_.payload_.connected_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.MessageWrapper.connected_response)
}
inline ::Messages::ConnectedResponse* MessageWrapper::_internal_mutable_connected_response() {
  if (payload_case() != kConnectedResponse) {
    clear_payload();
    set_has_connected_response();
    _impl_.payload_.connected_response_ =
        ::google::protobuf::Message::DefaultConstruct<::Messages::ConnectedResponse>(GetArena());
  }
  return _impl_.payload_.connected_response_;
}
inline ::Messages::ConnectedResponse* MessageWrapper::mutable_connected_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Messages::ConnectedResponse* _msg = _internal_mutable_connected_response();
  // @@protoc_insertion_point(field_mutable:Messages.MessageWrapper.connected_response)
  return _msg;
}

// .Messages.KeepAliveNoti keep_alive_noti = 11;
inline bool MessageWrapper::has_keep_alive_noti() const {
  return payload_case() == kKeepAliveNoti;
}
inline bool MessageWrapper::_internal_has_keep_alive_noti() const {
  return payload_case() == kKeepAliveNoti;
}
inline void MessageWrapper::set_has_keep_alive_noti() {
  _impl_._oneof_case_[0] = kKeepAliveNoti;
}
inline void MessageWrapper::clear_keep_alive_noti() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kKeepAliveNoti) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.keep_alive_noti_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.keep_alive_noti_);
    }
    clear_has_payload();
  }
}
inline ::Messages::KeepAliveNoti* MessageWrapper::release_keep_alive_noti() {
  // @@protoc_insertion_point(field_release:Messages.MessageWrapper.keep_alive_noti)
  if (payload_case() == kKeepAliveNoti) {
    clear_has_payload();
    auto* temp = _impl_.payload_.keep_alive_noti_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.keep_alive_noti_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Messages::KeepAliveNoti& MessageWrapper::_internal_keep_alive_noti() const {
  return payload_case() == kKeepAliveNoti ? *_impl_.payload_.keep_alive_noti_ : reinterpret_cast<::Messages::KeepAliveNoti&>(::Messages::_KeepAliveNoti_default_instance_);
}
inline const ::Messages::KeepAliveNoti& MessageWrapper::keep_alive_noti() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Messages.MessageWrapper.keep_alive_noti)
  return _internal_keep_alive_noti();
}
inline ::Messages::KeepAliveNoti* MessageWrapper::unsafe_arena_release_keep_alive_noti() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.MessageWrapper.keep_alive_noti)
  if (payload_case() == kKeepAliveNoti) {
    clear_has_payload();
    auto* temp = _impl_.payload_.keep_alive_noti_;
    _impl_.payload_.keep_alive_noti_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageWrapper::unsafe_arena_set_allocated_keep_alive_noti(::Messages::KeepAliveNoti* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_keep_alive_noti();
    _impl_.payload_.keep_alive_noti_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.MessageWrapper.keep_alive_noti)
}
inline ::Messages::KeepAliveNoti* MessageWrapper::_internal_mutable_keep_alive_noti() {
  if (payload_case() != kKeepAliveNoti) {
    clear_payload();
    set_has_keep_alive_noti();
    _impl_.payload_.keep_alive_noti_ =
        ::google::protobuf::Message::DefaultConstruct<::Messages::KeepAliveNoti>(GetArena());
  }
  return _impl_.payload_.keep_alive_noti_;
}
inline ::Messages::KeepAliveNoti* MessageWrapper::mutable_keep_alive_noti() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Messages::KeepAliveNoti* _msg = _internal_mutable_keep_alive_noti();
  // @@protoc_insertion_point(field_mutable:Messages.MessageWrapper.keep_alive_noti)
  return _msg;
}

// .Messages.KeepAliveRequest keep_alive_request = 12;
inline bool MessageWrapper::has_keep_alive_request() const {
  return payload_case() == kKeepAliveRequest;
}
inline bool MessageWrapper::_internal_has_keep_alive_request() const {
  return payload_case() == kKeepAliveRequest;
}
inline void MessageWrapper::set_has_keep_alive_request() {
  _impl_._oneof_case_[0] = kKeepAliveRequest;
}
inline void MessageWrapper::clear_keep_alive_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kKeepAliveRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.keep_alive_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.keep_alive_request_);
    }
    clear_has_payload();
  }
}
inline ::Messages::KeepAliveRequest* MessageWrapper::release_keep_alive_request() {
  // @@protoc_insertion_point(field_release:Messages.MessageWrapper.keep_alive_request)
  if (payload_case() == kKeepAliveRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.keep_alive_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.keep_alive_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Messages::KeepAliveRequest& MessageWrapper::_internal_keep_alive_request() const {
  return payload_case() == kKeepAliveRequest ? *_impl_.payload_.keep_alive_request_ : reinterpret_cast<::Messages::KeepAliveRequest&>(::Messages::_KeepAliveRequest_default_instance_);
}
inline const ::Messages::KeepAliveRequest& MessageWrapper::keep_alive_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Messages.MessageWrapper.keep_alive_request)
  return _internal_keep_alive_request();
}
inline ::Messages::KeepAliveRequest* MessageWrapper::unsafe_arena_release_keep_alive_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.MessageWrapper.keep_alive_request)
  if (payload_case() == kKeepAliveRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.keep_alive_request_;
    _impl_.payload_.keep_alive_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageWrapper::unsafe_arena_set_allocated_keep_alive_request(::Messages::KeepAliveRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_keep_alive_request();
    _impl_.payload_.keep_alive_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.MessageWrapper.keep_alive_request)
}
inline ::Messages::KeepAliveRequest* MessageWrapper::_internal_mutable_keep_alive_request() {
  if (payload_case() != kKeepAliveRequest) {
    clear_payload();
    set_has_keep_alive_request();
    _impl_.payload_.keep_alive_request_ =
        ::google::protobuf::Message::DefaultConstruct<::Messages::KeepAliveRequest>(GetArena());
  }
  return _impl_.payload_.keep_alive_request_;
}
inline ::Messages::KeepAliveRequest* MessageWrapper::mutable_keep_alive_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Messages::KeepAliveRequest* _msg = _internal_mutable_keep_alive_request();
  // @@protoc_insertion_point(field_mutable:Messages.MessageWrapper.keep_alive_request)
  return _msg;
}

inline bool MessageWrapper::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MessageWrapper::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MessageWrapper::PayloadCase MessageWrapper::payload_case() const {
  return MessageWrapper::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConnectedResponse

// int32 index = 1;
inline void ConnectedResponse::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t ConnectedResponse::index() const {
  // @@protoc_insertion_point(field_get:Messages.ConnectedResponse.index)
  return _internal_index();
}
inline void ConnectedResponse::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Messages.ConnectedResponse.index)
}
inline ::int32_t ConnectedResponse::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void ConnectedResponse::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// KeepAliveNoti

// -------------------------------------------------------------------

// KeepAliveRequest

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Messages


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // message_2eproto_2epb_2eh
